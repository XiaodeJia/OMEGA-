#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace NOMEGA
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="NOMEGA")]
	public partial class OMEGADBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertBooking(Booking instance);
    partial void UpdateBooking(Booking instance);
    partial void DeleteBooking(Booking instance);
    partial void InsertCustomer(Customer instance);
    partial void UpdateCustomer(Customer instance);
    partial void DeleteCustomer(Customer instance);
    partial void InsertEmployee(Employee instance);
    partial void UpdateEmployee(Employee instance);
    partial void DeleteEmployee(Employee instance);
    partial void InsertRental(Rental instance);
    partial void UpdateRental(Rental instance);
    partial void DeleteRental(Rental instance);
    partial void InsertTimeSheet(TimeSheet instance);
    partial void UpdateTimeSheet(TimeSheet instance);
    partial void DeleteTimeSheet(TimeSheet instance);
    partial void InsertSalary(Salary instance);
    partial void UpdateSalary(Salary instance);
    partial void DeleteSalary(Salary instance);
    partial void InsertVehicle(Vehicle instance);
    partial void UpdateVehicle(Vehicle instance);
    partial void DeleteVehicle(Vehicle instance);
    partial void InsertCategory(Category instance);
    partial void UpdateCategory(Category instance);
    partial void DeleteCategory(Category instance);
    partial void InsertVehileCategory(VehileCategory instance);
    partial void UpdateVehileCategory(VehileCategory instance);
    partial void DeleteVehileCategory(VehileCategory instance);
    partial void InsertExpenditure(Expenditure instance);
    partial void UpdateExpenditure(Expenditure instance);
    partial void DeleteExpenditure(Expenditure instance);
    #endregion
		
		public OMEGADBDataContext() : 
				base(global::NOMEGA.Properties.Settings.Default.NOMEGAConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public OMEGADBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public OMEGADBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public OMEGADBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public OMEGADBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Booking> Bookings
		{
			get
			{
				return this.GetTable<Booking>();
			}
		}
		
		public System.Data.Linq.Table<Customer> Customers
		{
			get
			{
				return this.GetTable<Customer>();
			}
		}
		
		public System.Data.Linq.Table<Employee> Employees
		{
			get
			{
				return this.GetTable<Employee>();
			}
		}
		
		public System.Data.Linq.Table<Rental> Rentals
		{
			get
			{
				return this.GetTable<Rental>();
			}
		}
		
		public System.Data.Linq.Table<TimeSheet> TimeSheets
		{
			get
			{
				return this.GetTable<TimeSheet>();
			}
		}
		
		public System.Data.Linq.Table<Salary> Salaries
		{
			get
			{
				return this.GetTable<Salary>();
			}
		}
		
		public System.Data.Linq.Table<Vehicle> Vehicles
		{
			get
			{
				return this.GetTable<Vehicle>();
			}
		}
		
		public System.Data.Linq.Table<Category> Categories
		{
			get
			{
				return this.GetTable<Category>();
			}
		}
		
		public System.Data.Linq.Table<VehileCategory> VehileCategories
		{
			get
			{
				return this.GetTable<VehileCategory>();
			}
		}
		
		public System.Data.Linq.Table<Expenditure> Expenditures
		{
			get
			{
				return this.GetTable<Expenditure>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Booking")]
	public partial class Booking : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _bookingId;
		
		private System.Nullable<int> _vehicleId;
		
		private System.Nullable<int> _employeeId;
		
		private System.Nullable<int> _customerId;
		
		private string _bookTime;
		
		private string _rentTime;
		
		private string _status;
		
		private EntityRef<Customer> _Customer;
		
		private EntityRef<Employee> _Employee;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnbookingIdChanging(int value);
    partial void OnbookingIdChanged();
    partial void OnvehicleIdChanging(System.Nullable<int> value);
    partial void OnvehicleIdChanged();
    partial void OnemployeeIdChanging(System.Nullable<int> value);
    partial void OnemployeeIdChanged();
    partial void OncustomerIdChanging(System.Nullable<int> value);
    partial void OncustomerIdChanged();
    partial void OnbookTimeChanging(string value);
    partial void OnbookTimeChanged();
    partial void OnrentTimeChanging(string value);
    partial void OnrentTimeChanged();
    partial void OnstatusChanging(string value);
    partial void OnstatusChanged();
    #endregion
		
		public Booking()
		{
			this._Customer = default(EntityRef<Customer>);
			this._Employee = default(EntityRef<Employee>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bookingId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int bookingId
		{
			get
			{
				return this._bookingId;
			}
			set
			{
				if ((this._bookingId != value))
				{
					this.OnbookingIdChanging(value);
					this.SendPropertyChanging();
					this._bookingId = value;
					this.SendPropertyChanged("bookingId");
					this.OnbookingIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_vehicleId", DbType="Int")]
		public System.Nullable<int> vehicleId
		{
			get
			{
				return this._vehicleId;
			}
			set
			{
				if ((this._vehicleId != value))
				{
					this.OnvehicleIdChanging(value);
					this.SendPropertyChanging();
					this._vehicleId = value;
					this.SendPropertyChanged("vehicleId");
					this.OnvehicleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_employeeId", DbType="Int")]
		public System.Nullable<int> employeeId
		{
			get
			{
				return this._employeeId;
			}
			set
			{
				if ((this._employeeId != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnemployeeIdChanging(value);
					this.SendPropertyChanging();
					this._employeeId = value;
					this.SendPropertyChanged("employeeId");
					this.OnemployeeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_customerId", DbType="Int")]
		public System.Nullable<int> customerId
		{
			get
			{
				return this._customerId;
			}
			set
			{
				if ((this._customerId != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncustomerIdChanging(value);
					this.SendPropertyChanging();
					this._customerId = value;
					this.SendPropertyChanged("customerId");
					this.OncustomerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bookTime", DbType="NChar(10)")]
		public string bookTime
		{
			get
			{
				return this._bookTime;
			}
			set
			{
				if ((this._bookTime != value))
				{
					this.OnbookTimeChanging(value);
					this.SendPropertyChanging();
					this._bookTime = value;
					this.SendPropertyChanged("bookTime");
					this.OnbookTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_rentTime", DbType="NChar(10)")]
		public string rentTime
		{
			get
			{
				return this._rentTime;
			}
			set
			{
				if ((this._rentTime != value))
				{
					this.OnrentTimeChanging(value);
					this.SendPropertyChanging();
					this._rentTime = value;
					this.SendPropertyChanged("rentTime");
					this.OnrentTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_status", DbType="NChar(10)")]
		public string status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					this.OnstatusChanging(value);
					this.SendPropertyChanging();
					this._status = value;
					this.SendPropertyChanged("status");
					this.OnstatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_Booking", Storage="_Customer", ThisKey="customerId", OtherKey="customerId", IsForeignKey=true)]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.Bookings.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.Bookings.Add(this);
						this._customerId = value.customerId;
					}
					else
					{
						this._customerId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Booking", Storage="_Employee", ThisKey="employeeId", OtherKey="employeeId", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.Bookings.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.Bookings.Add(this);
						this._employeeId = value.employeeId;
					}
					else
					{
						this._employeeId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Customer")]
	public partial class Customer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _customerId;
		
		private string _firstName;
		
		private string _lastName;
		
		private string _dob;
		
		private string _mobile;
		
		private string _email;
		
		private string _address;
		
		private string _status;
		
		private EntitySet<Booking> _Bookings;
		
		private EntitySet<Rental> _Rentals;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OncustomerIdChanging(int value);
    partial void OncustomerIdChanged();
    partial void OnfirstNameChanging(string value);
    partial void OnfirstNameChanged();
    partial void OnlastNameChanging(string value);
    partial void OnlastNameChanged();
    partial void OndobChanging(string value);
    partial void OndobChanged();
    partial void OnmobileChanging(string value);
    partial void OnmobileChanged();
    partial void OnemailChanging(string value);
    partial void OnemailChanged();
    partial void OnaddressChanging(string value);
    partial void OnaddressChanged();
    partial void OnstatusChanging(string value);
    partial void OnstatusChanged();
    #endregion
		
		public Customer()
		{
			this._Bookings = new EntitySet<Booking>(new Action<Booking>(this.attach_Bookings), new Action<Booking>(this.detach_Bookings));
			this._Rentals = new EntitySet<Rental>(new Action<Rental>(this.attach_Rentals), new Action<Rental>(this.detach_Rentals));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_customerId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int customerId
		{
			get
			{
				return this._customerId;
			}
			set
			{
				if ((this._customerId != value))
				{
					this.OncustomerIdChanging(value);
					this.SendPropertyChanging();
					this._customerId = value;
					this.SendPropertyChanged("customerId");
					this.OncustomerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_firstName", DbType="NChar(10)")]
		public string firstName
		{
			get
			{
				return this._firstName;
			}
			set
			{
				if ((this._firstName != value))
				{
					this.OnfirstNameChanging(value);
					this.SendPropertyChanging();
					this._firstName = value;
					this.SendPropertyChanged("firstName");
					this.OnfirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lastName", DbType="NChar(10)")]
		public string lastName
		{
			get
			{
				return this._lastName;
			}
			set
			{
				if ((this._lastName != value))
				{
					this.OnlastNameChanging(value);
					this.SendPropertyChanging();
					this._lastName = value;
					this.SendPropertyChanged("lastName");
					this.OnlastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dob", DbType="NChar(10)")]
		public string dob
		{
			get
			{
				return this._dob;
			}
			set
			{
				if ((this._dob != value))
				{
					this.OndobChanging(value);
					this.SendPropertyChanging();
					this._dob = value;
					this.SendPropertyChanged("dob");
					this.OndobChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_mobile", DbType="NChar(10)")]
		public string mobile
		{
			get
			{
				return this._mobile;
			}
			set
			{
				if ((this._mobile != value))
				{
					this.OnmobileChanging(value);
					this.SendPropertyChanging();
					this._mobile = value;
					this.SendPropertyChanged("mobile");
					this.OnmobileChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_email", DbType="NChar(10)")]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this.OnemailChanging(value);
					this.SendPropertyChanging();
					this._email = value;
					this.SendPropertyChanged("email");
					this.OnemailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_address", DbType="NChar(10)")]
		public string address
		{
			get
			{
				return this._address;
			}
			set
			{
				if ((this._address != value))
				{
					this.OnaddressChanging(value);
					this.SendPropertyChanging();
					this._address = value;
					this.SendPropertyChanged("address");
					this.OnaddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_status", DbType="NChar(10)")]
		public string status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					this.OnstatusChanging(value);
					this.SendPropertyChanging();
					this._status = value;
					this.SendPropertyChanged("status");
					this.OnstatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_Booking", Storage="_Bookings", ThisKey="customerId", OtherKey="customerId")]
		public EntitySet<Booking> Bookings
		{
			get
			{
				return this._Bookings;
			}
			set
			{
				this._Bookings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_Rental", Storage="_Rentals", ThisKey="customerId", OtherKey="customerId")]
		public EntitySet<Rental> Rentals
		{
			get
			{
				return this._Rentals;
			}
			set
			{
				this._Rentals.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Bookings(Booking entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_Bookings(Booking entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
		
		private void attach_Rentals(Rental entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_Rentals(Rental entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Employee")]
	public partial class Employee : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _employeeId;
		
		private string _firstName;
		
		private string _lastName;
		
		private string _gender;
		
		private string _dob;
		
		private string _jobTitle;
		
		private string _password;
		
		private EntitySet<Booking> _Bookings;
		
		private EntitySet<Rental> _Rentals;
		
		private EntitySet<TimeSheet> _TimeSheets;
		
		private EntitySet<Salary> _Salaries;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnemployeeIdChanging(int value);
    partial void OnemployeeIdChanged();
    partial void OnfirstNameChanging(string value);
    partial void OnfirstNameChanged();
    partial void OnlastNameChanging(string value);
    partial void OnlastNameChanged();
    partial void OngenderChanging(string value);
    partial void OngenderChanged();
    partial void OndobChanging(string value);
    partial void OndobChanged();
    partial void OnjobTitleChanging(string value);
    partial void OnjobTitleChanged();
    partial void OnpasswordChanging(string value);
    partial void OnpasswordChanged();
    #endregion
		
		public Employee()
		{
			this._Bookings = new EntitySet<Booking>(new Action<Booking>(this.attach_Bookings), new Action<Booking>(this.detach_Bookings));
			this._Rentals = new EntitySet<Rental>(new Action<Rental>(this.attach_Rentals), new Action<Rental>(this.detach_Rentals));
			this._TimeSheets = new EntitySet<TimeSheet>(new Action<TimeSheet>(this.attach_TimeSheets), new Action<TimeSheet>(this.detach_TimeSheets));
			this._Salaries = new EntitySet<Salary>(new Action<Salary>(this.attach_Salaries), new Action<Salary>(this.detach_Salaries));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_employeeId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int employeeId
		{
			get
			{
				return this._employeeId;
			}
			set
			{
				if ((this._employeeId != value))
				{
					this.OnemployeeIdChanging(value);
					this.SendPropertyChanging();
					this._employeeId = value;
					this.SendPropertyChanged("employeeId");
					this.OnemployeeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_firstName", DbType="NChar(32)")]
		public string firstName
		{
			get
			{
				return this._firstName;
			}
			set
			{
				if ((this._firstName != value))
				{
					this.OnfirstNameChanging(value);
					this.SendPropertyChanging();
					this._firstName = value;
					this.SendPropertyChanged("firstName");
					this.OnfirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lastName", DbType="NChar(32)")]
		public string lastName
		{
			get
			{
				return this._lastName;
			}
			set
			{
				if ((this._lastName != value))
				{
					this.OnlastNameChanging(value);
					this.SendPropertyChanging();
					this._lastName = value;
					this.SendPropertyChanged("lastName");
					this.OnlastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_gender", DbType="NChar(10)")]
		public string gender
		{
			get
			{
				return this._gender;
			}
			set
			{
				if ((this._gender != value))
				{
					this.OngenderChanging(value);
					this.SendPropertyChanging();
					this._gender = value;
					this.SendPropertyChanged("gender");
					this.OngenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dob", DbType="NChar(15)")]
		public string dob
		{
			get
			{
				return this._dob;
			}
			set
			{
				if ((this._dob != value))
				{
					this.OndobChanging(value);
					this.SendPropertyChanging();
					this._dob = value;
					this.SendPropertyChanged("dob");
					this.OndobChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_jobTitle", DbType="NChar(10)")]
		public string jobTitle
		{
			get
			{
				return this._jobTitle;
			}
			set
			{
				if ((this._jobTitle != value))
				{
					this.OnjobTitleChanging(value);
					this.SendPropertyChanging();
					this._jobTitle = value;
					this.SendPropertyChanged("jobTitle");
					this.OnjobTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_password", DbType="NChar(50)")]
		public string password
		{
			get
			{
				return this._password;
			}
			set
			{
				if ((this._password != value))
				{
					this.OnpasswordChanging(value);
					this.SendPropertyChanging();
					this._password = value;
					this.SendPropertyChanged("password");
					this.OnpasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Booking", Storage="_Bookings", ThisKey="employeeId", OtherKey="employeeId")]
		public EntitySet<Booking> Bookings
		{
			get
			{
				return this._Bookings;
			}
			set
			{
				this._Bookings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Rental", Storage="_Rentals", ThisKey="employeeId", OtherKey="employeeId")]
		public EntitySet<Rental> Rentals
		{
			get
			{
				return this._Rentals;
			}
			set
			{
				this._Rentals.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_TimeSheet", Storage="_TimeSheets", ThisKey="employeeId", OtherKey="employeeId")]
		public EntitySet<TimeSheet> TimeSheets
		{
			get
			{
				return this._TimeSheets;
			}
			set
			{
				this._TimeSheets.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Salary", Storage="_Salaries", ThisKey="employeeId", OtherKey="employeeId")]
		public EntitySet<Salary> Salaries
		{
			get
			{
				return this._Salaries;
			}
			set
			{
				this._Salaries.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Bookings(Booking entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_Bookings(Booking entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_Rentals(Rental entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_Rentals(Rental entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_TimeSheets(TimeSheet entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_TimeSheets(TimeSheet entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_Salaries(Salary entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_Salaries(Salary entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Rental")]
	public partial class Rental : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RentalId;
		
		private System.Nullable<int> _employeeId;
		
		private System.Nullable<int> _customerId;
		
		private System.Nullable<int> _vehicleId;
		
		private System.Nullable<int> _expenditureId;
		
		private System.Nullable<int> _bookingId;
		
		private string _status;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<Customer> _Customer;
		
		private EntityRef<Vehicle> _Vehicle;
		
		private EntityRef<Expenditure> _Expenditure;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRentalIdChanging(int value);
    partial void OnRentalIdChanged();
    partial void OnemployeeIdChanging(System.Nullable<int> value);
    partial void OnemployeeIdChanged();
    partial void OncustomerIdChanging(System.Nullable<int> value);
    partial void OncustomerIdChanged();
    partial void OnvehicleIdChanging(System.Nullable<int> value);
    partial void OnvehicleIdChanged();
    partial void OnexpenditureIdChanging(System.Nullable<int> value);
    partial void OnexpenditureIdChanged();
    partial void OnbookingIdChanging(System.Nullable<int> value);
    partial void OnbookingIdChanged();
    partial void OnstatusChanging(string value);
    partial void OnstatusChanged();
    #endregion
		
		public Rental()
		{
			this._Employee = default(EntityRef<Employee>);
			this._Customer = default(EntityRef<Customer>);
			this._Vehicle = default(EntityRef<Vehicle>);
			this._Expenditure = default(EntityRef<Expenditure>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RentalId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RentalId
		{
			get
			{
				return this._RentalId;
			}
			set
			{
				if ((this._RentalId != value))
				{
					this.OnRentalIdChanging(value);
					this.SendPropertyChanging();
					this._RentalId = value;
					this.SendPropertyChanged("RentalId");
					this.OnRentalIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_employeeId", DbType="Int")]
		public System.Nullable<int> employeeId
		{
			get
			{
				return this._employeeId;
			}
			set
			{
				if ((this._employeeId != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnemployeeIdChanging(value);
					this.SendPropertyChanging();
					this._employeeId = value;
					this.SendPropertyChanged("employeeId");
					this.OnemployeeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_customerId", DbType="Int")]
		public System.Nullable<int> customerId
		{
			get
			{
				return this._customerId;
			}
			set
			{
				if ((this._customerId != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncustomerIdChanging(value);
					this.SendPropertyChanging();
					this._customerId = value;
					this.SendPropertyChanged("customerId");
					this.OncustomerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_vehicleId", DbType="Int")]
		public System.Nullable<int> vehicleId
		{
			get
			{
				return this._vehicleId;
			}
			set
			{
				if ((this._vehicleId != value))
				{
					if (this._Vehicle.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnvehicleIdChanging(value);
					this.SendPropertyChanging();
					this._vehicleId = value;
					this.SendPropertyChanged("vehicleId");
					this.OnvehicleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_expenditureId", DbType="Int")]
		public System.Nullable<int> expenditureId
		{
			get
			{
				return this._expenditureId;
			}
			set
			{
				if ((this._expenditureId != value))
				{
					if (this._Expenditure.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnexpenditureIdChanging(value);
					this.SendPropertyChanging();
					this._expenditureId = value;
					this.SendPropertyChanged("expenditureId");
					this.OnexpenditureIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bookingId", DbType="Int")]
		public System.Nullable<int> bookingId
		{
			get
			{
				return this._bookingId;
			}
			set
			{
				if ((this._bookingId != value))
				{
					this.OnbookingIdChanging(value);
					this.SendPropertyChanging();
					this._bookingId = value;
					this.SendPropertyChanged("bookingId");
					this.OnbookingIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_status", DbType="NChar(10)")]
		public string status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					this.OnstatusChanging(value);
					this.SendPropertyChanging();
					this._status = value;
					this.SendPropertyChanged("status");
					this.OnstatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Rental", Storage="_Employee", ThisKey="employeeId", OtherKey="employeeId", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.Rentals.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.Rentals.Add(this);
						this._employeeId = value.employeeId;
					}
					else
					{
						this._employeeId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_Rental", Storage="_Customer", ThisKey="customerId", OtherKey="customerId", IsForeignKey=true)]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.Rentals.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.Rentals.Add(this);
						this._customerId = value.customerId;
					}
					else
					{
						this._customerId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Vehicle_Rental", Storage="_Vehicle", ThisKey="vehicleId", OtherKey="vehicleId", IsForeignKey=true)]
		public Vehicle Vehicle
		{
			get
			{
				return this._Vehicle.Entity;
			}
			set
			{
				Vehicle previousValue = this._Vehicle.Entity;
				if (((previousValue != value) 
							|| (this._Vehicle.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Vehicle.Entity = null;
						previousValue.Rentals.Remove(this);
					}
					this._Vehicle.Entity = value;
					if ((value != null))
					{
						value.Rentals.Add(this);
						this._vehicleId = value.vehicleId;
					}
					else
					{
						this._vehicleId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Vehicle");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Expenditure_Rental", Storage="_Expenditure", ThisKey="expenditureId", OtherKey="expenditureId", IsForeignKey=true)]
		public Expenditure Expenditure
		{
			get
			{
				return this._Expenditure.Entity;
			}
			set
			{
				Expenditure previousValue = this._Expenditure.Entity;
				if (((previousValue != value) 
							|| (this._Expenditure.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Expenditure.Entity = null;
						previousValue.Rentals.Remove(this);
					}
					this._Expenditure.Entity = value;
					if ((value != null))
					{
						value.Rentals.Add(this);
						this._expenditureId = value.expenditureId;
					}
					else
					{
						this._expenditureId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Expenditure");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TimeSheet")]
	public partial class TimeSheet : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _timeSheetId;
		
		private System.Nullable<int> _employeeId;
		
		private string _workingHours;
		
		private string _overTimeHours;
		
		private EntitySet<Salary> _Salaries;
		
		private EntityRef<Employee> _Employee;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OntimeSheetIdChanging(int value);
    partial void OntimeSheetIdChanged();
    partial void OnemployeeIdChanging(System.Nullable<int> value);
    partial void OnemployeeIdChanged();
    partial void OnworkingHoursChanging(string value);
    partial void OnworkingHoursChanged();
    partial void OnoverTimeHoursChanging(string value);
    partial void OnoverTimeHoursChanged();
    #endregion
		
		public TimeSheet()
		{
			this._Salaries = new EntitySet<Salary>(new Action<Salary>(this.attach_Salaries), new Action<Salary>(this.detach_Salaries));
			this._Employee = default(EntityRef<Employee>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_timeSheetId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int timeSheetId
		{
			get
			{
				return this._timeSheetId;
			}
			set
			{
				if ((this._timeSheetId != value))
				{
					this.OntimeSheetIdChanging(value);
					this.SendPropertyChanging();
					this._timeSheetId = value;
					this.SendPropertyChanged("timeSheetId");
					this.OntimeSheetIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_employeeId", DbType="Int")]
		public System.Nullable<int> employeeId
		{
			get
			{
				return this._employeeId;
			}
			set
			{
				if ((this._employeeId != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnemployeeIdChanging(value);
					this.SendPropertyChanging();
					this._employeeId = value;
					this.SendPropertyChanged("employeeId");
					this.OnemployeeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_workingHours", DbType="NChar(10)")]
		public string workingHours
		{
			get
			{
				return this._workingHours;
			}
			set
			{
				if ((this._workingHours != value))
				{
					this.OnworkingHoursChanging(value);
					this.SendPropertyChanging();
					this._workingHours = value;
					this.SendPropertyChanged("workingHours");
					this.OnworkingHoursChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_overTimeHours", DbType="NChar(10)")]
		public string overTimeHours
		{
			get
			{
				return this._overTimeHours;
			}
			set
			{
				if ((this._overTimeHours != value))
				{
					this.OnoverTimeHoursChanging(value);
					this.SendPropertyChanging();
					this._overTimeHours = value;
					this.SendPropertyChanged("overTimeHours");
					this.OnoverTimeHoursChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TimeSheet_Salary", Storage="_Salaries", ThisKey="timeSheetId", OtherKey="timeSheetId")]
		public EntitySet<Salary> Salaries
		{
			get
			{
				return this._Salaries;
			}
			set
			{
				this._Salaries.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_TimeSheet", Storage="_Employee", ThisKey="employeeId", OtherKey="employeeId", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.TimeSheets.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.TimeSheets.Add(this);
						this._employeeId = value.employeeId;
					}
					else
					{
						this._employeeId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Salaries(Salary entity)
		{
			this.SendPropertyChanging();
			entity.TimeSheet = this;
		}
		
		private void detach_Salaries(Salary entity)
		{
			this.SendPropertyChanging();
			entity.TimeSheet = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Salary")]
	public partial class Salary : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _salaryId;
		
		private System.Nullable<int> _employeeId;
		
		private System.Nullable<int> _timeSheetId;
		
		private string _workSalary;
		
		private string _overtimeSalary;
		
		private string _bonus;
		
		private string _total;
		
		private string _salaryDate;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<TimeSheet> _TimeSheet;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnsalaryIdChanging(int value);
    partial void OnsalaryIdChanged();
    partial void OnemployeeIdChanging(System.Nullable<int> value);
    partial void OnemployeeIdChanged();
    partial void OntimeSheetIdChanging(System.Nullable<int> value);
    partial void OntimeSheetIdChanged();
    partial void OnworkSalaryChanging(string value);
    partial void OnworkSalaryChanged();
    partial void OnovertimeSalaryChanging(string value);
    partial void OnovertimeSalaryChanged();
    partial void OnbonusChanging(string value);
    partial void OnbonusChanged();
    partial void OntotalChanging(string value);
    partial void OntotalChanged();
    partial void OnsalaryDateChanging(string value);
    partial void OnsalaryDateChanged();
    #endregion
		
		public Salary()
		{
			this._Employee = default(EntityRef<Employee>);
			this._TimeSheet = default(EntityRef<TimeSheet>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_salaryId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int salaryId
		{
			get
			{
				return this._salaryId;
			}
			set
			{
				if ((this._salaryId != value))
				{
					this.OnsalaryIdChanging(value);
					this.SendPropertyChanging();
					this._salaryId = value;
					this.SendPropertyChanged("salaryId");
					this.OnsalaryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_employeeId", DbType="Int")]
		public System.Nullable<int> employeeId
		{
			get
			{
				return this._employeeId;
			}
			set
			{
				if ((this._employeeId != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnemployeeIdChanging(value);
					this.SendPropertyChanging();
					this._employeeId = value;
					this.SendPropertyChanged("employeeId");
					this.OnemployeeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_timeSheetId", DbType="Int")]
		public System.Nullable<int> timeSheetId
		{
			get
			{
				return this._timeSheetId;
			}
			set
			{
				if ((this._timeSheetId != value))
				{
					if (this._TimeSheet.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OntimeSheetIdChanging(value);
					this.SendPropertyChanging();
					this._timeSheetId = value;
					this.SendPropertyChanged("timeSheetId");
					this.OntimeSheetIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_workSalary", DbType="NChar(10)")]
		public string workSalary
		{
			get
			{
				return this._workSalary;
			}
			set
			{
				if ((this._workSalary != value))
				{
					this.OnworkSalaryChanging(value);
					this.SendPropertyChanging();
					this._workSalary = value;
					this.SendPropertyChanged("workSalary");
					this.OnworkSalaryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_overtimeSalary", DbType="NChar(10)")]
		public string overtimeSalary
		{
			get
			{
				return this._overtimeSalary;
			}
			set
			{
				if ((this._overtimeSalary != value))
				{
					this.OnovertimeSalaryChanging(value);
					this.SendPropertyChanging();
					this._overtimeSalary = value;
					this.SendPropertyChanged("overtimeSalary");
					this.OnovertimeSalaryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bonus", DbType="NChar(10)")]
		public string bonus
		{
			get
			{
				return this._bonus;
			}
			set
			{
				if ((this._bonus != value))
				{
					this.OnbonusChanging(value);
					this.SendPropertyChanging();
					this._bonus = value;
					this.SendPropertyChanged("bonus");
					this.OnbonusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_total", DbType="NChar(10)")]
		public string total
		{
			get
			{
				return this._total;
			}
			set
			{
				if ((this._total != value))
				{
					this.OntotalChanging(value);
					this.SendPropertyChanging();
					this._total = value;
					this.SendPropertyChanged("total");
					this.OntotalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_salaryDate", DbType="NChar(10)")]
		public string salaryDate
		{
			get
			{
				return this._salaryDate;
			}
			set
			{
				if ((this._salaryDate != value))
				{
					this.OnsalaryDateChanging(value);
					this.SendPropertyChanging();
					this._salaryDate = value;
					this.SendPropertyChanged("salaryDate");
					this.OnsalaryDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Salary", Storage="_Employee", ThisKey="employeeId", OtherKey="employeeId", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.Salaries.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.Salaries.Add(this);
						this._employeeId = value.employeeId;
					}
					else
					{
						this._employeeId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TimeSheet_Salary", Storage="_TimeSheet", ThisKey="timeSheetId", OtherKey="timeSheetId", IsForeignKey=true)]
		public TimeSheet TimeSheet
		{
			get
			{
				return this._TimeSheet.Entity;
			}
			set
			{
				TimeSheet previousValue = this._TimeSheet.Entity;
				if (((previousValue != value) 
							|| (this._TimeSheet.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TimeSheet.Entity = null;
						previousValue.Salaries.Remove(this);
					}
					this._TimeSheet.Entity = value;
					if ((value != null))
					{
						value.Salaries.Add(this);
						this._timeSheetId = value.timeSheetId;
					}
					else
					{
						this._timeSheetId = default(Nullable<int>);
					}
					this.SendPropertyChanged("TimeSheet");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Vehicle")]
	public partial class Vehicle : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _vehicleId;
		
		private string _maker;
		
		private string _mode;
		
		private string _makeTime;
		
		private string _color;
		
		private string _odometer;
		
		private string _description;
		
		private string _categoryType;
		
		private string _status;
		
		private EntitySet<Rental> _Rentals;
		
		private EntitySet<VehileCategory> _VehileCategories;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnvehicleIdChanging(int value);
    partial void OnvehicleIdChanged();
    partial void OnmakerChanging(string value);
    partial void OnmakerChanged();
    partial void OnmodeChanging(string value);
    partial void OnmodeChanged();
    partial void OnmakeTimeChanging(string value);
    partial void OnmakeTimeChanged();
    partial void OncolorChanging(string value);
    partial void OncolorChanged();
    partial void OnodometerChanging(string value);
    partial void OnodometerChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    partial void OncategoryTypeChanging(string value);
    partial void OncategoryTypeChanged();
    partial void OnstatusChanging(string value);
    partial void OnstatusChanged();
    #endregion
		
		public Vehicle()
		{
			this._Rentals = new EntitySet<Rental>(new Action<Rental>(this.attach_Rentals), new Action<Rental>(this.detach_Rentals));
			this._VehileCategories = new EntitySet<VehileCategory>(new Action<VehileCategory>(this.attach_VehileCategories), new Action<VehileCategory>(this.detach_VehileCategories));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_vehicleId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int vehicleId
		{
			get
			{
				return this._vehicleId;
			}
			set
			{
				if ((this._vehicleId != value))
				{
					this.OnvehicleIdChanging(value);
					this.SendPropertyChanging();
					this._vehicleId = value;
					this.SendPropertyChanged("vehicleId");
					this.OnvehicleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_maker", DbType="NChar(32)")]
		public string maker
		{
			get
			{
				return this._maker;
			}
			set
			{
				if ((this._maker != value))
				{
					this.OnmakerChanging(value);
					this.SendPropertyChanging();
					this._maker = value;
					this.SendPropertyChanged("maker");
					this.OnmakerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_mode", DbType="NChar(32)")]
		public string mode
		{
			get
			{
				return this._mode;
			}
			set
			{
				if ((this._mode != value))
				{
					this.OnmodeChanging(value);
					this.SendPropertyChanging();
					this._mode = value;
					this.SendPropertyChanged("mode");
					this.OnmodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_makeTime", DbType="NChar(32)")]
		public string makeTime
		{
			get
			{
				return this._makeTime;
			}
			set
			{
				if ((this._makeTime != value))
				{
					this.OnmakeTimeChanging(value);
					this.SendPropertyChanging();
					this._makeTime = value;
					this.SendPropertyChanged("makeTime");
					this.OnmakeTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_color", DbType="NChar(32)")]
		public string color
		{
			get
			{
				return this._color;
			}
			set
			{
				if ((this._color != value))
				{
					this.OncolorChanging(value);
					this.SendPropertyChanging();
					this._color = value;
					this.SendPropertyChanged("color");
					this.OncolorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_odometer", DbType="NChar(32)")]
		public string odometer
		{
			get
			{
				return this._odometer;
			}
			set
			{
				if ((this._odometer != value))
				{
					this.OnodometerChanging(value);
					this.SendPropertyChanging();
					this._odometer = value;
					this.SendPropertyChanged("odometer");
					this.OnodometerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="NChar(32)")]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_categoryType", DbType="NChar(32)")]
		public string categoryType
		{
			get
			{
				return this._categoryType;
			}
			set
			{
				if ((this._categoryType != value))
				{
					this.OncategoryTypeChanging(value);
					this.SendPropertyChanging();
					this._categoryType = value;
					this.SendPropertyChanged("categoryType");
					this.OncategoryTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_status", DbType="NChar(32)")]
		public string status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					this.OnstatusChanging(value);
					this.SendPropertyChanging();
					this._status = value;
					this.SendPropertyChanged("status");
					this.OnstatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Vehicle_Rental", Storage="_Rentals", ThisKey="vehicleId", OtherKey="vehicleId")]
		public EntitySet<Rental> Rentals
		{
			get
			{
				return this._Rentals;
			}
			set
			{
				this._Rentals.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Vehicle_VehileCategory", Storage="_VehileCategories", ThisKey="vehicleId", OtherKey="vehicleId")]
		public EntitySet<VehileCategory> VehileCategories
		{
			get
			{
				return this._VehileCategories;
			}
			set
			{
				this._VehileCategories.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Rentals(Rental entity)
		{
			this.SendPropertyChanging();
			entity.Vehicle = this;
		}
		
		private void detach_Rentals(Rental entity)
		{
			this.SendPropertyChanging();
			entity.Vehicle = null;
		}
		
		private void attach_VehileCategories(VehileCategory entity)
		{
			this.SendPropertyChanging();
			entity.Vehicle = this;
		}
		
		private void detach_VehileCategories(VehileCategory entity)
		{
			this.SendPropertyChanging();
			entity.Vehicle = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Category")]
	public partial class Category : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _categoryId;
		
		private string _categoryType;
		
		private string _rentalRate;
		
		private EntitySet<VehileCategory> _VehileCategories;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OncategoryIdChanging(int value);
    partial void OncategoryIdChanged();
    partial void OncategoryTypeChanging(string value);
    partial void OncategoryTypeChanged();
    partial void OnrentalRateChanging(string value);
    partial void OnrentalRateChanged();
    #endregion
		
		public Category()
		{
			this._VehileCategories = new EntitySet<VehileCategory>(new Action<VehileCategory>(this.attach_VehileCategories), new Action<VehileCategory>(this.detach_VehileCategories));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_categoryId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int categoryId
		{
			get
			{
				return this._categoryId;
			}
			set
			{
				if ((this._categoryId != value))
				{
					this.OncategoryIdChanging(value);
					this.SendPropertyChanging();
					this._categoryId = value;
					this.SendPropertyChanged("categoryId");
					this.OncategoryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_categoryType", DbType="NChar(10)")]
		public string categoryType
		{
			get
			{
				return this._categoryType;
			}
			set
			{
				if ((this._categoryType != value))
				{
					this.OncategoryTypeChanging(value);
					this.SendPropertyChanging();
					this._categoryType = value;
					this.SendPropertyChanged("categoryType");
					this.OncategoryTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_rentalRate", DbType="NChar(10)")]
		public string rentalRate
		{
			get
			{
				return this._rentalRate;
			}
			set
			{
				if ((this._rentalRate != value))
				{
					this.OnrentalRateChanging(value);
					this.SendPropertyChanging();
					this._rentalRate = value;
					this.SendPropertyChanged("rentalRate");
					this.OnrentalRateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_VehileCategory", Storage="_VehileCategories", ThisKey="categoryId", OtherKey="categoryId")]
		public EntitySet<VehileCategory> VehileCategories
		{
			get
			{
				return this._VehileCategories;
			}
			set
			{
				this._VehileCategories.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_VehileCategories(VehileCategory entity)
		{
			this.SendPropertyChanging();
			entity.Category = this;
		}
		
		private void detach_VehileCategories(VehileCategory entity)
		{
			this.SendPropertyChanging();
			entity.Category = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.VehileCategory")]
	public partial class VehileCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _vehicleId;
		
		private System.Nullable<int> _categoryId;
		
		private EntityRef<Category> _Category;
		
		private EntityRef<Vehicle> _Vehicle;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnvehicleIdChanging(int value);
    partial void OnvehicleIdChanged();
    partial void OncategoryIdChanging(System.Nullable<int> value);
    partial void OncategoryIdChanged();
    #endregion
		
		public VehileCategory()
		{
			this._Category = default(EntityRef<Category>);
			this._Vehicle = default(EntityRef<Vehicle>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_vehicleId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int vehicleId
		{
			get
			{
				return this._vehicleId;
			}
			set
			{
				if ((this._vehicleId != value))
				{
					if (this._Vehicle.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnvehicleIdChanging(value);
					this.SendPropertyChanging();
					this._vehicleId = value;
					this.SendPropertyChanged("vehicleId");
					this.OnvehicleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_categoryId", DbType="Int")]
		public System.Nullable<int> categoryId
		{
			get
			{
				return this._categoryId;
			}
			set
			{
				if ((this._categoryId != value))
				{
					if (this._Category.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncategoryIdChanging(value);
					this.SendPropertyChanging();
					this._categoryId = value;
					this.SendPropertyChanged("categoryId");
					this.OncategoryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_VehileCategory", Storage="_Category", ThisKey="categoryId", OtherKey="categoryId", IsForeignKey=true)]
		public Category Category
		{
			get
			{
				return this._Category.Entity;
			}
			set
			{
				Category previousValue = this._Category.Entity;
				if (((previousValue != value) 
							|| (this._Category.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Category.Entity = null;
						previousValue.VehileCategories.Remove(this);
					}
					this._Category.Entity = value;
					if ((value != null))
					{
						value.VehileCategories.Add(this);
						this._categoryId = value.categoryId;
					}
					else
					{
						this._categoryId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Category");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Vehicle_VehileCategory", Storage="_Vehicle", ThisKey="vehicleId", OtherKey="vehicleId", IsForeignKey=true)]
		public Vehicle Vehicle
		{
			get
			{
				return this._Vehicle.Entity;
			}
			set
			{
				Vehicle previousValue = this._Vehicle.Entity;
				if (((previousValue != value) 
							|| (this._Vehicle.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Vehicle.Entity = null;
						previousValue.VehileCategories.Remove(this);
					}
					this._Vehicle.Entity = value;
					if ((value != null))
					{
						value.VehileCategories.Add(this);
						this._vehicleId = value.vehicleId;
					}
					else
					{
						this._vehicleId = default(int);
					}
					this.SendPropertyChanged("Vehicle");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Expenditure")]
	public partial class Expenditure : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _expenditureId;
		
		private System.Nullable<int> _vehicleId;
		
		private System.Nullable<int> _fuelCost;
		
		private System.Nullable<int> _parkOffence;
		
		private System.Nullable<int> _trafficeOffence;
		
		private System.Nullable<int> _deposit;
		
		private System.Nullable<int> _rental;
		
		private System.Nullable<int> _total;
		
		private string _status;
		
		private string _StartDate;
		
		private string _EndDate;
		
		private EntitySet<Rental> _Rentals;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnexpenditureIdChanging(int value);
    partial void OnexpenditureIdChanged();
    partial void OnvehicleIdChanging(System.Nullable<int> value);
    partial void OnvehicleIdChanged();
    partial void OnfuelCostChanging(System.Nullable<int> value);
    partial void OnfuelCostChanged();
    partial void OnparkOffenceChanging(System.Nullable<int> value);
    partial void OnparkOffenceChanged();
    partial void OntrafficeOffenceChanging(System.Nullable<int> value);
    partial void OntrafficeOffenceChanged();
    partial void OndepositChanging(System.Nullable<int> value);
    partial void OndepositChanged();
    partial void OnrentalChanging(System.Nullable<int> value);
    partial void OnrentalChanged();
    partial void OntotalChanging(System.Nullable<int> value);
    partial void OntotalChanged();
    partial void OnstatusChanging(string value);
    partial void OnstatusChanged();
    partial void OnStartDateChanging(string value);
    partial void OnStartDateChanged();
    partial void OnEndDateChanging(string value);
    partial void OnEndDateChanged();
    #endregion
		
		public Expenditure()
		{
			this._Rentals = new EntitySet<Rental>(new Action<Rental>(this.attach_Rentals), new Action<Rental>(this.detach_Rentals));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_expenditureId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int expenditureId
		{
			get
			{
				return this._expenditureId;
			}
			set
			{
				if ((this._expenditureId != value))
				{
					this.OnexpenditureIdChanging(value);
					this.SendPropertyChanging();
					this._expenditureId = value;
					this.SendPropertyChanged("expenditureId");
					this.OnexpenditureIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_vehicleId", DbType="Int")]
		public System.Nullable<int> vehicleId
		{
			get
			{
				return this._vehicleId;
			}
			set
			{
				if ((this._vehicleId != value))
				{
					this.OnvehicleIdChanging(value);
					this.SendPropertyChanging();
					this._vehicleId = value;
					this.SendPropertyChanged("vehicleId");
					this.OnvehicleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fuelCost", DbType="Int")]
		public System.Nullable<int> fuelCost
		{
			get
			{
				return this._fuelCost;
			}
			set
			{
				if ((this._fuelCost != value))
				{
					this.OnfuelCostChanging(value);
					this.SendPropertyChanging();
					this._fuelCost = value;
					this.SendPropertyChanged("fuelCost");
					this.OnfuelCostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_parkOffence", DbType="Int")]
		public System.Nullable<int> parkOffence
		{
			get
			{
				return this._parkOffence;
			}
			set
			{
				if ((this._parkOffence != value))
				{
					this.OnparkOffenceChanging(value);
					this.SendPropertyChanging();
					this._parkOffence = value;
					this.SendPropertyChanged("parkOffence");
					this.OnparkOffenceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_trafficeOffence", DbType="Int")]
		public System.Nullable<int> trafficeOffence
		{
			get
			{
				return this._trafficeOffence;
			}
			set
			{
				if ((this._trafficeOffence != value))
				{
					this.OntrafficeOffenceChanging(value);
					this.SendPropertyChanging();
					this._trafficeOffence = value;
					this.SendPropertyChanged("trafficeOffence");
					this.OntrafficeOffenceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_deposit", DbType="Int")]
		public System.Nullable<int> deposit
		{
			get
			{
				return this._deposit;
			}
			set
			{
				if ((this._deposit != value))
				{
					this.OndepositChanging(value);
					this.SendPropertyChanging();
					this._deposit = value;
					this.SendPropertyChanged("deposit");
					this.OndepositChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_rental", DbType="Int")]
		public System.Nullable<int> rental
		{
			get
			{
				return this._rental;
			}
			set
			{
				if ((this._rental != value))
				{
					this.OnrentalChanging(value);
					this.SendPropertyChanging();
					this._rental = value;
					this.SendPropertyChanged("rental");
					this.OnrentalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_total", DbType="Int")]
		public System.Nullable<int> total
		{
			get
			{
				return this._total;
			}
			set
			{
				if ((this._total != value))
				{
					this.OntotalChanging(value);
					this.SendPropertyChanging();
					this._total = value;
					this.SendPropertyChanged("total");
					this.OntotalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_status", DbType="NChar(32)")]
		public string status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					this.OnstatusChanging(value);
					this.SendPropertyChanging();
					this._status = value;
					this.SendPropertyChanged("status");
					this.OnstatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartDate", DbType="NChar(32)")]
		public string StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndDate", DbType="NChar(32)")]
		public string EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Expenditure_Rental", Storage="_Rentals", ThisKey="expenditureId", OtherKey="expenditureId")]
		public EntitySet<Rental> Rentals
		{
			get
			{
				return this._Rentals;
			}
			set
			{
				this._Rentals.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Rentals(Rental entity)
		{
			this.SendPropertyChanging();
			entity.Expenditure = this;
		}
		
		private void detach_Rentals(Rental entity)
		{
			this.SendPropertyChanging();
			entity.Expenditure = null;
		}
	}
}
#pragma warning restore 1591
